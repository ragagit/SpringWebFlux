Spring WebFlux


-Reactive Manifesto www.reactivemanifesto.org
	Jonas Boner (Akka founder)

	Responsive
		Systems responds in a timely manner
	
	Resilient
		System stays responsive in the face of failure
		Failures are contained within each component without compromising the system as a whole

	Elastic
		The system stays responsive under varying workload
		It can react to change in the input rate by increasing or decreasing resources
		
	Message Driven
		Reactive Systems rely on asynchronous message to establish a boundary between components. This ensures loose 			coupling, isolation and location.
		Non-blocking communication allows recipients to only consume resources while active
		Message passing enables load management, elasticity and flow control

-Reactive Programming
	Reactive Programming is an asynchronous programming paradigm focused on streams
	of data.
	It maintains a continuous interaction with the environment but at a speed which
	is determined by the environment, not the program itself.

-Features of Reactive Programming
	Data Streams
		A stream is a sequence of events ordered in time.
		JMS message, RESTFul service calls, Twitter feed, stock trades 

	Asynchronous
		Events are captured asynchronously
		A function is defined to execute when:
			An event is emitted
			An error is emitted
			Complete is emitted			

	Non-blocking
		In blocking the code will stop and wait for more data.
		In Non-blocking in contrast will process available data and
		ask to be notified when more is available then continue

	Backpressure
		The ability of the subscriber to throttle data.

	Failures as Messages 
		Exceptions are processed by a handler function.

-Reactive Streams API
	Goal is to create a standard for asynchronous stream processing with
	non-blocking back pressure.
	It started in 2013 by engineers from Netflix, Pivotal, Lightbend, RedHat
	Twitter and Oracle.
	It is a set of 4 interfaces which define the API
	2015 Reactive Streams was released.
	Reactive Streams is now part of the Java 9 JDK.
	Adoptions:
		Akka Streams
		MongoDB
		Ratpack
		Reactive Rabbit
		Project Reactor (Spring 5)
		RxJava
		Slick 3.0
		Vert.x 3.0
		Cassandra
		ElasticSearch
		Kafka
		Play

	Interfaces
		Publisher
			Datastreams
		Subscriber
			Consumer
		Subscriptions
		Processor

-Spring MVC & Spring WebFlux
	@Controller/@RequestMapping	Router Functions
	spring-webmvc			spring-webflux
	Servlet API			HTTP/Reactive Streams
	Servlet Container		Tomcat, Jetty, Netty, Undertow

-Spring Reactive Types
	Mono
		It is a publisher with zero or one element in data stream
	Flux
		It is a publisher with zero or many elements in data stream

-Netflux App
	Lombock
		Build, Execution, Deployment -> Compiler -> Annotation Processors -> Enable annotation processing 


-Functional Programming
	Imperative programming
		It is a paradigm that uses statements that change a program's state.

		List<String> dogs = Arrays.asList("Vizsla", "Lab", "Golden", "GSP", "Poodle", "Yorkie", "Mutt");

		int dogCount = 0;

		for(String dog : dogs){
			if(dog.length() == 6){
				dogCount++;
			}
		}
		System.out.println(dogCount);

	Functional programming
		It is a style of building the structure and elements of computer programs
		that treats computation as the evaluation of mathematical functions and avoids
		changing-state and mutable data. 

		System.out.println(dogs
				.stream()
				.filter(dog -> dog.length() == 6)
				.collect(Collectors.toList())
				.size());		


	Imperative  	vs  	Declarative
	How to do it		What to do
	Mutable			Immutable (Transforms)
	Has side effects	No side effects
	Pass Objects		Can also pass functions
	Hard to compose		Functional Composition
	Not Threadsafe		Threadsafe


	Pure Functional vs Functional Style
	Pure Functional Languages will not allow any mutability
		Haskel is an example
	Functional Style language will encourage immutability BUT immutability is not strictly enforced
	Java is a Functional Style Language

	Functions
		Can be passed objects
		Can create objects
		Can return objects

	High order functions
		Can be passed objects and functions
		Can create objects and functions
		Can return objects and functions
		Java supports higher order functions
	
-Streams
	It is a sequence of elements
	It is not a collection
	Collections are in-memory data structures
	Collections are eagerly computed
	Streams can operate on collections
	Steams are lazily evaluated

-ParallelStream
	Enables multithreaded stream
	Use with caution
	Not an automatic performance improvement
	Likely to slow down processing of smaller data sets

-Stream Operations
	forEach
	map
	filter
	limit
	sorted

-Stream Collectors
	toList
	toMap
	toSet
	And Then
	joining()
	counting()

-Stream Collectors - Numbers
	averagingXX
	summingXX
	minBy/maxBy

-Stream Collectors - Map Results
	groupingBy()
	portitioningBy() - returns map of true/false elements matching/notmatching given predicate

-Customized collector
	Implement customized collector by implementing Interface Collector



-Project using Spring Webflux
	Web
		Reactive Web
	Core
		Lombok	

-MongoDB
	Document oriented DB
	The word is derived from Humongous
	Developed in C++
	NoSQL
	Documents are stored in BSON Binary JSON
	Dev in 2007 by 10gen
	It is great for high insert systems
	Schema flexible
	Supports high number of reads/sec
	No ACID
	Not good for concurrent updates
	No locking for transaction

	RDMS 		MongoDB
	Database	Database
	Table		Collection
	Row		Document
	Column		Field
	Table Join	Embedded Documents
	Primary Key	Primary Key
	Aggregation 	Aggregation Pipeline

	docker run -p 27017:27017 -d mongo

-Project
	NoSQL
		Reactive MongoDB
		Embedded MongoDB
	Web
		Reactive Web










	